# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1shFpx1tdI5qCoiNCcz1d0dCaH2gk_3mK
"""

#O(N)
class Solution:
    def twoSum(self, nums, target) -> List[int]:
        d = {}
        for i in range(len(nums)):
            n = target - nums[i]
            if n in d:
                return i, d[n]
            else:
                d[nums[i]] = i

#O(N^2)
class Solution:
    def twoSum(self, nums, target) -> List[int]:
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i, j]

#O(NlogN)
class Solution:
    def twoSum(self, nums, target) -> List[int]:
        nums = sorted(enumerate(nums), key=operator.itemgetter(1))
        a = 0 
        b = len(nums) - 1
        while a < b:
            s = nums[a][1] + nums[b][1]
            if s > target: b -= 1
            if s < target: a += 1
            if s == target:
                return nums[a][0], nums[b][0]